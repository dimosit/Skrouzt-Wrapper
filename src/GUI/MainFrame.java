package GUI;

import db.Database;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import productTypes.GraphicsCard;
import productTypes.Laptop;
import productTypes.MobilePhone;
import productTypes.Motherboard;

/**
 * Created by d on 02/06/2015..
 */
//main class 
public class MainFrame extends javax.swing.JFrame 
{
    Database             db = new Database();
    private final String columnNames[];
    
    
   //constructor
    public MainFrame() 
    {
        initComponents();
        
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                System.exit(0);
            }
        });
        
        this.columnNames = new String[] { "Url", "Name", "Price", "Rating", "Specs" };
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        productCombo = new javax.swing.JComboBox();
        tablePane = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        deleteDataFromDbButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Show");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        productCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mobile Phone", "Laptop", "Graphics Card", "Motherboard" }));
        productCombo.setName("productCombo"); // NOI18N
        productCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productComboActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Url", "Name", "Price", "Rating", "Specs"
            }
        ));
        tablePane.setViewportView(productTable);

        deleteDataFromDbButton.setText("DELETE");
        deleteDataFromDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataFromDbButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteDataFromDbButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jButton1)
                        .addGap(155, 155, 155)
                        .addComponent(deleteDataFromDbButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //method for button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    {
                
                Object selected = productCombo.getSelectedItem();

                // if selected item is Mobile Phone show phones in JTable
                if (selected.toString().equals("Mobile Phone")) {
                    try {
                        //get all phones  from db and store to arraylist
                        ArrayList<MobilePhone> phones = Database.getPhonesFromDb();

                        // check if phones list is empty
                        if (phones.isEmpty() == true) {

                            // if arraylist is empty  insert phones in db
                            db.insertPhonesToDb();
                            //update phone list
                            phones = Database.getPhonesFromDb();
                        } 
                        
                        Object[][] objects = new Object[phones.size()][phones.size()];
                        int        i       = 0;
                        for (MobilePhone product : phones) 
                        {
                            objects[i][0] = product.getUrl();
                            objects[i][1] = product.getName();
                            objects[i][2] = product.getPrice();
                            objects[i][3] = product.getRating();
                            objects[i][4] = product.getSpecs();
                            i++;
                        }
                        
                        DefaultTableModel tableModel = new DefaultTableModel(objects,columnNames);
                        productTable.setModel(tableModel);                            

                    } catch (Exception ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }//end of if

                // if selected item  is Laptop
                if (selected.toString().equals("Laptop")) {
                    try {
                        //get all laptop  from db and store to arraylist
                        ArrayList<Laptop> laptops = Database.getLaptopsFromDb();

                        // check if laptops list is empty
                        if (laptops.isEmpty() == true) {

                            // if arraylist is empty  insert phones in db
                            db.insertLaptopsToDb();
                            //
                            laptops = Database.getLaptopsFromDb();
                        } 

                        Object[][] objects = new Object[laptops.size()][laptops.size()];
                        int        i       = 0;
                        for (Laptop  product : laptops) 
                        {
                            objects[i][0] = product.getUrl();
                            objects[i][1] = product.getName();
                            objects[i][2] = product.getPrice();
                            objects[i][3] = product.getRating();
                            objects[i][4] = product.getSpecs();
                            i++;
                        }
                        
                        DefaultTableModel tableModel = new DefaultTableModel(objects,columnNames);
                        productTable.setModel(tableModel);

                    } catch (Exception ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }//end of if

                // if selected item is Graphics Card
                if (selected.toString().equals("Graphics Card")) {

                    try {
                        //get all graphics  from db and store in to arraylist
                        ArrayList<GraphicsCard> graphics = Database.getGraphicsCardsFromDb();

                        // check if graphics list is empty
                        if (graphics.isEmpty() == true) {

                            // if arraylist is empty  insert graphics in db
                            db.insertGraphicsCardsToDb();
                            //update arraylist
                            graphics = Database.getGraphicsCardsFromDb();
                        } 

                        Object[][] objects = new Object[graphics.size()][graphics.size()];
                        int        i       = 0;
                        for (GraphicsCard product : graphics) 
                        {
                            objects[i][0] = product.getUrl();
                            objects[i][1] = product.getName();
                            objects[i][2] = product.getPrice();
                            objects[i][3] = product.getRating();
                            objects[i][4] = product.getSpecs();
                            i++;
                        }
                        
                        DefaultTableModel tableModel = new DefaultTableModel(objects,columnNames);
                        productTable.setModel(tableModel);                           

                    } catch (Exception ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }//end of if

                // if selected item is motherboard
                if (selected.toString().equals("Motherboard")) {

                    try {
                        //get all motherboards  from db and store to arraylist
                        ArrayList<Motherboard> motherboards = Database.getMotherBoardsFromDb();

                        // check if motherboardslist is empty
                        if (motherboards.isEmpty() == true) {

                            // if arraylist is empty  insert motherboard in db
                            db.insertMotherboardsToDb();
                            //update motherboard list
                            motherboards = Database.getMotherBoardsFromDb();
                        } 

                        Object[][] objects = new Object[motherboards.size()][motherboards.size()];
                        int        i       = 0;
                        for (Motherboard product : motherboards) 
                        {
                            objects[i][0] = product.getUrl();
                            objects[i][1] = product.getName();
                            objects[i][2] = product.getPrice();
                            objects[i][3] = product.getRating();
                            objects[i][4] = product.getSpecs();
                            i++;
                        }
                        
                        DefaultTableModel tableModel = new DefaultTableModel(objects,columnNames);
                        productTable.setModel(tableModel);
                            
                    } catch (Exception ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }//end of if
                
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void productComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productComboActionPerformed
    //button to delete all data from skrouzt table in db
    private void deleteDataFromDbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataFromDbButtonActionPerformed
        try {
            String popString = "Are you sure you want to delete all data from database!!";
            int answer = JOptionPane.showConfirmDialog ( jPanel1, popString);
            if (answer == JOptionPane.YES_OPTION) {               
                db.deleteAllDataFromSkrouzt();
            }else if (answer == JOptionPane.NO_OPTION) {
             //do nathing
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteDataFromDbButtonActionPerformed
  
    /**
     * @param args the command line arguments
     * main method 
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteDataFromDbButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox productCombo;
    private javax.swing.JTable productTable;
    private javax.swing.JScrollPane tablePane;
    // End of variables declaration//GEN-END:variables
}
